#!/usr/bin/env node
"use strict";var _path=_interopRequireDefault(require("path")),_fs=_interopRequireDefault(require("fs")),_fastGlob=_interopRequireDefault(require("fast-glob")),_meow=_interopRequireDefault(require("meow")),_makeDir=_interopRequireDefault(require("make-dir")),_updateNotifier=_interopRequireDefault(require("update-notifier")),_posthtml=_interopRequireDefault(require("posthtml")),_outResolve=_interopRequireDefault(require("./out-resolve")),_cfgResolve=_interopRequireDefault(require("./cfg-resolve")),_pluginResolve=_interopRequireDefault(require("./plugin-resolve"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}const package_=require("../package.json");(0,_updateNotifier.default)({pkg:package_}).notify();const cli=(0,_meow.default)(`
  Usage: posthtml <patterns>

  Options:
    --output -o      Output File or Folder
    --config -c      Path to config file
    --use -u         PostHTML plugin name
    --root -r        Mirror the directory structure relative to this path in the output directory(default: .)
    --allInOutput -a Save the nesting structure for output
    --help -h        CLI Help
    --version -v     CLI Version

  Examples:
    $ posthtml input.html
    $ posthtml input.html -o output.html
    $ posthtml inputFolder/*.html !unicorn.html
    $ posthtml input.html -o output.html -c posthtml.js
    $ posthtml input.html -o output.html -u posthtml-bem --posthtml-bem.elemPrefix __
    $ posthtml inputFolder/*.html -o outputFolder
    $ posthtml inputFolder/**/*.html -o outputFolder -a
    $ posthtml inputFolder/**/*.html -o outputFolder -a -r inputFolder
`,{flags:{config:{type:"string",alias:"c"},version:{type:"boolean",alias:"v"},help:{type:"boolean",alias:"h"},output:{type:"string",alias:"o"},use:{type:"string",alias:"u",isMultiple:!0},// https://github.com/sindresorhus/meow/issues/158
// options: {
//   type: 'string',
//   isMultiple: true
// },
root:{type:"string",alias:"r",default:"./"},allInOutput:{type:"boolean",default:!1,alias:"a"},skip:{type:"string",alias:"s",isMultiple:!0}}}),read=file=>new Promise(resolve=>{_fs.default.readFile(file,"utf8",(error,data)=>{error&&console.warn(error),resolve(data)})}),interopRequire=object=>object&&object.__esModule?object.default:object,getPlugins=config=>Object.keys(config.plugins||{}).map(plugin=>interopRequire(require((0,_pluginResolve.default)(plugin,config.root)))(config.plugins[plugin])),config=(0,_cfgResolve.default)(cli),processing=async file=>{const output=await(0,_outResolve.default)(file,config),plugins=Array.isArray(config.plugins)?config.plugins:getPlugins(config),skipParse=config.skip.includes(file);(0,_makeDir.default)(_path.default.dirname(output)).then(read.bind(void 0,file)).then(html=>Promise.resolve((0,_posthtml.default)(plugins).process(html,{...config.options,skipParse,from:file}))).then(({html})=>{_fs.default.writeFile(output,html,error=>{error&&console.warn(error),console.log(`The file ${file} has been saved!`)})})};_fastGlob.default.stream(config.input).on("data",processing).once("error",console.warn);